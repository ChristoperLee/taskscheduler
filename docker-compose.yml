version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskscheduler-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-taskscheduler}
      POSTGRES_USER: ${DB_USER:-taskscheduler}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - taskscheduler-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-taskscheduler}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: taskscheduler-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5001
      DATABASE_URL: postgresql://${DB_USER:-taskscheduler}:${DB_PASSWORD:-changeme}@postgres:5432/${DB_NAME:-taskscheduler}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./logs:/app/logs
    ports:
      - "5001:5001"
    networks:
      - taskscheduler-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        npm run migrate &&
        npm start
      "

  # Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5001/api}
    container_name: taskscheduler-frontend
    restart: unless-stopped
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:80"
    networks:
      - taskscheduler-network
    depends_on:
      - backend

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: taskscheduler-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./client/build:/usr/share/nginx/html:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - taskscheduler-network
    depends_on:
      - backend
      - frontend

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: taskscheduler-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - taskscheduler-network
    command: redis-server --appendonly yes

  # Database Backups (Optional)
  backup:
    image: prodrigestivill/postgres-backup-local
    container_name: taskscheduler-backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${DB_NAME:-taskscheduler}
      POSTGRES_USER: ${DB_USER:-taskscheduler}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      SCHEDULE: "@daily"
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
    volumes:
      - ./backups:/backups
    networks:
      - taskscheduler-network
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:

networks:
  taskscheduler-network:
    driver: bridge